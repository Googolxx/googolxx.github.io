<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Renjie&#39;s log</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Renjie&#39;s log</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 24 Jun 2025 20:08:36 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Diffusion-Based Generative Models &lt;2&gt;: DDIM</title>
      <link>http://localhost:1313/posts/diffusion-based-generative-models-2/</link>
      <pubDate>Tue, 24 Jun 2025 20:08:36 +0800</pubDate>
      <guid>http://localhost:1313/posts/diffusion-based-generative-models-2/</guid>
      <description>&lt;h2 id=&#34;一-引言&#34;&gt;一. 引言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇内容讲了DDPM的算法框架，看起来一切都很完美，但采样速度还是太慢了，如果设置 $ T=1000$, 那采样的代价还是太大了。因此迎来了DDIM (Denoising Diffusion Implicit Models)。对于DDIM，我觉得还是可以从 DDPM和 SDE/ODE 两个角度去分析的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-ddpm视角下的ddim&#34;&gt;1.1 DDPM视角下的DDIM&lt;/h3&gt;&#xA;&lt;h4 id=&#34;核心思想&#34;&gt;核心思想&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDPM&lt;/strong&gt; 是一个基于马尔可夫链的扩散模型，通过逐步加噪（前向过程）和逐步去噪（反向过程）学习数据分布。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDIM&lt;/strong&gt; 是 DDPM 的 &lt;strong&gt;非马尔可夫推广&lt;/strong&gt;，它重新参数化了反向过程，允许 &lt;strong&gt;跳过中间步骤&lt;/strong&gt;，从而加速采样。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;非马尔可夫性&#34;&gt;非马尔可夫性&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDPM&lt;/strong&gt;：前向和反向过程都是马尔可夫的（下一步仅依赖当前步）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDIM&lt;/strong&gt;：通过设计非马尔可夫的逆过程，打破了这一限制，允许更灵活的生成路径（如跳步采样）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;确定性生成&#34;&gt;确定性生成&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDPM&lt;/strong&gt;：反向过程是随机的（每一步注入高斯噪声）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;DDIM&lt;/strong&gt;：可以通过设定噪声方差为0，实现 &lt;strong&gt;确定性生成&lt;/strong&gt;（类似ODE），从而生成结果可重复。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;采样加速&#34;&gt;采样加速&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DDIM 通过重新参数化，将 DDPM 的 $T$ 步采样压缩到 $S$ 步（$S \ll T$），而保持相似的生成质量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;数学形式&#34;&gt;数学形式&lt;/h4&gt;&#xA;&lt;p&gt;DDIM 的逆过程改写为：&#xA;&lt;/p&gt;&#xA;$$&#xA;x_{t-1} = \sqrt{\alpha_{t-1}} \left( \frac{x_t - \sqrt{1-\alpha_t} \epsilon_\theta(x_t, t)}{\sqrt{\alpha_t}} \right) + \sqrt{1-\alpha_{t-1}} \epsilon_\theta(x_t, t)&#xA;$$&lt;p&gt;&#xA;其中 $\alpha_t$ 是噪声调度，$\epsilon_\theta$ 是去噪网络。当噪声项系数为0时，生成过程变为确定性。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;12-sdeode视角下的ddim&#34;&gt;1.2 SDE/ODE视角下的DDIM&lt;/h3&gt;&#xA;&lt;h4 id=&#34;核心思想-1&#34;&gt;核心思想&lt;/h4&gt;&#xA;&lt;p&gt;扩散模型可以统一描述为 &lt;strong&gt;随机微分方程（SDE）&lt;/strong&gt; 或 &lt;strong&gt;常微分方程（ODE）&lt;/strong&gt; 的离散化：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diffusion-Based Generative Models &lt;1&gt;: DDPM</title>
      <link>http://localhost:1313/posts/diffusion-based-generative-models-1/</link>
      <pubDate>Sun, 22 Jun 2025 13:43:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/diffusion-based-generative-models-1/</guid>
      <description>&lt;!-- summary = &#34;深入解读去噪扩散概率模型 (DDPM) 的核心算法与数学推导，揭示其如何通过前向加噪与反向去噪过程实现高质量生成。&#34; --&gt;&#xA;&lt;h2 id=&#34;一-引言&#34;&gt;一. 引言&lt;/h2&gt;&#xA;&lt;p&gt;扩散模型（&lt;strong&gt;Diffusion Models&lt;/strong&gt;）作为当前生成式 AI 的核心范式，受热力学启发&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，主要思想是迭代地加噪/去噪数据，模拟粒子扩散过程。在图像、视频生成等领域实现了非常好的效果。下文介绍核心代表作之一 &lt;strong&gt;DDPM&lt;/strong&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; (Denoising Diffusion Probabilistic Models)。&lt;/p&gt;&#xA;&lt;p&gt;随着 Diffusion-Based Generative Models 理论的逐渐完善，可以从多种视角（分数匹配、 微分方程等）推导出 DDPM 的前向/逆向扩散过程、优化目标和采样过程。这里，我们将遵循 DDPM 原文的思路进行推导。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;二-ddpm-算法框架&#34;&gt;二. DDPM 算法框架&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-前向扩散过程forward-diffusion-process&#34;&gt;1. 前向扩散过程（Forward Diffusion Process）&lt;/h3&gt;&#xA;&lt;p&gt;前向扩散过程是&lt;em&gt;&lt;strong&gt;无参&lt;/strong&gt;&lt;/em&gt;的扩散过程，服从一个马尔可夫链 (Markov Chain)：马尔科夫链为状态空间中经过从一个状态到另一个状态的转换的随机过程，该过程要求具备&amp;quot;无记忆性&amp;quot;，即下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。&lt;/p&gt;&#xA;&lt;p&gt;具体来说，从一个真实数据分布采样 $\mathbf{x_0} \sim q(\mathbf{x})$，通过逐步对数据 $\mathbf{x_0}$ 添加高斯噪声（Gaussian Noise），得到被扰动的样本 $\mathbf{x_1},&amp;hellip;\mathbf{x_t},&amp;hellip;\mathbf{x_T}$，在 $T$ 步后接近纯噪声。得益于高斯分布的特殊数学性质，其线性组合仍然是高斯分布，因此可以将加噪过程中互相独立的高斯噪声进行合并:&lt;/p&gt;&#xA;$$&#xA;\begin{aligned}&#xA;\mathbf{x_t} &amp;= \sqrt{\alpha_t} \mathbf{x_{t-1}} + \sqrt{1 - \alpha_t} \epsilon_{t-1} \\&#xA;    &amp;= \sqrt{\alpha_t} \left( \sqrt{\alpha_{t-1}} \mathbf{x_{t-2}} + \sqrt{1 - \alpha_{t-1}} \epsilon_{t-2} \right) + \sqrt{1 - \alpha_t} \epsilon_{t-1} \\&#xA;    &amp;= \sqrt{\alpha_{t-1} \alpha_t} \mathbf{x_{t-2}} + \underbrace{{\sqrt{\alpha_t} \sqrt{1 - \alpha_{t-1}} \epsilon_{t-2} + \sqrt{1 - \alpha_t} \epsilon_{t-1}}}_{\text{Combine noise using linear Gaussian}} \\&#xA;    &amp;= \sqrt{\alpha_{t-1} \alpha_t} \mathbf{x_{t-2}} + \sqrt{1 - \alpha_{t-1} \alpha_t} \bar{\epsilon}_{t-2} \\&#xA;    &amp;=  ... \\&#xA;    &amp;= \sqrt{\bar{\alpha}_t} \mathbf{x_0} +  \sqrt{1 - \bar{\alpha}_t} \bar{\epsilon}_{t}&#xA;\end{aligned}&#xA;$$&lt;p&gt;其中 $ { \alpha_0, \dots, \alpha_T }$ 是一组人为设置的超参数，用于控制扩散过程中噪声的强度，定义 $\bar{\alpha}&lt;em&gt;t = \prod&lt;/em&gt;{i=1}^t \alpha_i$。那么我们可以得到:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test</title>
      <link>http://localhost:1313/posts/test/</link>
      <pubDate>Sun, 04 May 2025 00:27:21 +0800</pubDate>
      <guid>http://localhost:1313/posts/test/</guid>
      <description>&lt;h3 id=&#34;正文&#34;&gt;正文&lt;/h3&gt;&#xA;&lt;p&gt;注意这里可能会有歧义，&lt;/p&gt;&#xA;$$&#xA;\begin{equation}&#xA;\begin{aligned}&#xA;p_{\theta}(x) &amp;= \frac{p_{\theta}(X, z)}{p(z|X)} \\&#xA;    &amp;= \frac{P_{\theta}(X|z)p(z)}{p(z|X)}&#xA;\end{aligned}&#xA;\end{equation}&#xA;$$&lt;p&gt;(注意这里可能会有歧义，我用 $p(z|X)$替代了 $p_{\theta}(z|X)$，但最后都会优化掉)。因为 $ p(z) \sim \mathcal{N}(z|0, I) $，而 $p_{\theta}(X|z)$ 就是Decoder所生成的分布，如果知道真实后验分布 $p(z|x)$，那我们也可以直接优化目标函数。但核心 $p(z|x)$ 是untracble的 （当然更严谨一点讲，也可以用hybird MC等方式来逼近，但就不在这里的讨论范畴了）。&lt;/p&gt;&#xA;&lt;p&gt;于是在VAE中，我们可以用变分贝叶斯，引入一个Encoder，生成 $ q_{\phi}(z|X) \sim \mathcal{N}(z|\mu(X;\phi), \sigma(X;\phi)I)$ 来逼近真实后验分布 $p(z|X)$ （类似地，这里协方差矩阵也为对角矩阵）。重新推导目标函数&lt;/p&gt;&#xA;$$&#xA;\begin{equation}&#xA;\begin{aligned}&#xA;\log p_{\theta}(X) &amp;\approx \frac{1}{m} \sum_{i=0}^{m} p_{\theta}(X|z_{i}) \\&#xA;    &amp;= \frac{1}{m} \sum_{i=0}^{m} \log \left( \frac{1}{(2\pi)^{K/2} |\Sigma|^{1/2}} \exp\left(-\frac{1}{2} (X - f(z_i))^T \Sigma^{-1} (X - f(z_i))\right) \right) \\&#xA;    &amp;= \frac{1}{m} \sum_{i=0}^{m} \left[ -\frac{K}{2} \log(2\pi) - \frac{1}{2} \log |\Sigma| - \frac{1}{2} (X - f(z_i))^T \Sigma^{-1} (X - f(z_i)) \right] \\&#xA;    &amp;\propto \frac{1}{m} \sum_{i=0}^{m} - \frac{1}{2} (X - f(z_i))^T \Sigma^{-1} (X - f(z_i)) \\ &#xA;    &amp;\propto \frac{1}{m} \sum_{i=0}^{m} \sum_{k=0}^{K} \frac{\left( x^{(k)} - f(z_i;\theta)^{(k)} \right)^{2}}{\sigma^{(k)}} \\&#xA;    &amp;\propto \frac{1}{m} \sum_{i=0}^{m} \sum_{k=0}^{K} \left( x^{(k)} - f(z_i;\theta)^{(k)} \right)^{2}&#xA;\end{aligned}&#xA;\end{equation}&#xA;$$&lt;p&gt;因为真实后验分布 $p(z|X)$ 没有解析解，且KL散度这一项 $ D_{\text{KL}}(q_{\phi}(z|X) | p(z|X)) $ 始终是大于0的，因此目标优化函数可以改为最大化 第一项。在变分贝叶斯方法中，这个损失函数被称为&lt;strong&gt;变分下界或证据下界（variational lower bound, or evidence lower bound）&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variational Autoencoder</title>
      <link>http://localhost:1313/posts/variational-autoencoder/</link>
      <pubDate>Thu, 17 Apr 2025 00:03:29 +0800</pubDate>
      <guid>http://localhost:1313/posts/variational-autoencoder/</guid>
      <description>&lt;h2 id=&#34;生成模型的目标&#34;&gt;生成模型的目标&lt;/h2&gt;&#xA;&lt;p&gt;生成模型（Generative Models）的目的是想学习真实数据分布 $p(x)$， 其中 $X$ 通常是定义在某个（高维）空间 $\mathcal{X}$ 上的数据点。比如一张图像就是一个高维数据点，每个像素对应一个维度。具体来讲生成模型想要解决的问题：&lt;em&gt;&lt;strong&gt;考虑一个从真实分布 $p(x)$ 中采样得到的数据集 $ \lbrace{x_1, x_2, \dots, x_n \rbrace}$  ，我们希望从采样得到的数据子集中学习一个分布 $p_\theta(x)$ ，逼近真实分布 $p(x)$&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;变分自编码器-variational-autoencoder&#34;&gt;变分自编码器 Variational Autoencoder&lt;/h2&gt;&#xA;&lt;p&gt;变分自编码器（VAE）作为一种生成模型，依然在现在的机器学习算法占有一席之地。VAE的优化目标推导其实有好几种方式，在开始之前，我想先从最简单的例子开始。&lt;/p&gt;&#xA;&lt;h3 id=&#34;简单假设下存在的问题&#34;&gt;简单假设下存在的问题&lt;/h3&gt;&#xA;&lt;p&gt;考虑对人脸数据集CelebA的建模，我们希望从CelebA数据集中学习到分布 $p_\theta(x)$，然后从 $p_\theta(x)$ 中采样得到新的人脸样本。从流形假设（Manifold Hypothesis）的角度来讲，自然图像数据在高维像素空间中形成一个稠密子集，其内在结构可以用一个低维、非线性流形来近似建模；或者说，图像数据服从一个 &lt;em&gt;&lt;strong&gt;嵌入在高维像素空间中低维非线性流形分布&lt;/strong&gt;&lt;/em&gt; 。以CelebA为例，每张图像的数据维度为178x218x3维，RGB图像每一维有256种取值，这个一个非常庞大的高维空间，只有极少数组合才对应一张“真实的人脸”，实际上影响人脸的因素可以抽象为具体几类（比如表情，年龄，肤色，五官轮廓等等）。当然，具体抽象成哪些类别并不是我们关心的问题，我们关心的是高维（图像）数据 $x$ 到低维空间隐变量 $z$（latent variables）的映射关系，通过构建这对映射关系，我们能够实现从 $p(z)$ 中采样，生成新样本 $ \hat{x}$。其实深度学习中不少领域都与该流形假设有关，比如自编码器、表示学习、对抗样本等。&lt;/p&gt;&#xA;&lt;p&gt;基于上面的想法，一个很自然的想法浮现在脑海中：可以直接构建一个解码器（Decoder），从先验分布 $p(z)$ 中采样，作为Decoder的输入，生成样本并和真实分布中的数据求距离：&lt;/p&gt;&#xA;$$&#xA;\begin{equation}&#xA;\begin{aligned}&#xA;p_{\theta}(X) &amp;= \int p_{\theta}(X|z)p(z) dz \\&#xA;     &amp;= \int \mathcal{N}(X|f(z;\theta), \Sigma) \cdot \mathcal{N}(z|0, I) dz \\&#xA;     &amp;= \mathbb{E}_{z \sim p(z)} \left[ p_{\theta}(X|z) \right] \\&#xA;     &amp;\approx \frac{1}{m} \sum_{i=0}^{m} p_{\theta}(X|z_{i})&#xA;\end{aligned}&#xA;\end{equation}&#xA;$$&lt;p&gt;其中，$f(z;\theta)$ 是隐变量 $z$ 到样本空间 $ X$ 的映射函数，在这里也就是Decoder，隐变量 $z$ 通常假设为服从均值为 $0$，协方差矩阵为单元矩阵 $I$ 的高斯分布 $\mathcal{N}(z|0, I) $；Decoder生成的样本分布 $p_{\theta}(X|z)$ 的均值，协方差矩阵 $\Sigma$ 一般设为常数。容易发现，我们利用蒙特卡洛采样（Monte Carlo Sampling）从 $p(z)$ 中采样，经过Decoder就可以生成新的样本了，然后计算损失，反向传播优化Decoder了。&#xA;&lt;figure&gt;&lt;img src=&#34;http://localhost:1313/pic_vae/dec.png&#34; width=&#34;1600&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
